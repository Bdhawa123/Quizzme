{"version":3,"sources":["questions/question.js","Components/AnswerBoard.js","Components/QuizComponent.js","contexts/ScoreBoardContext.js","Components/Home.js","Components/Profile.js","Components/NavBar.js","Components/Footer.js","Components/Index.js","App.js","serviceWorker.js","index.js"],"names":["question","AnswerBoard","score","showAnswerBoard","console","log","className","map","qs","Card","CardTitle","CardBody","options","answer","Button","color","onClick","attendedQlist","QuizComponent","addScore","resetScore","drcScore","increaseTries","SuccessRate","useState","Qno","setQno","prev","setPrev","nxt","setNxt","modal","setModal","answerboard","setAnswerboard","currentQuestion","reset","length","next","element","id","includes","filter","value","push","qsans","alert","scorePercent","Modal","isOpen","ModalHeader","toggle","ScoreBoardContext","createContext","ScoreBoardContextProvider","props","setScore","tries","setTries","successRate","setsuccessRate","Provider","decreaseScore","newscore","rate","children","HomeComponent","useContext","ProfileComponent","useEffect","NavBar","Navbar","NavbarBrand","to","Footer","Index","Container","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9f316726.chunk.js","sourcesContent":["let question =[ \n   {\n        'id':1,\n        'qs':'What does BBC stand for',\n        'options':['Big baggy captital','British broad captital','Bogotoa business capital','British Broad Cast'],\n        'answer':3\n    }, \n    {\n        'id':2,\n        'qs':'What nut is used to make marzipan?',\n        'options':['Almond','Peanuts','Bazelnut','Cashew'],\n        'answer':0\n    },\n    {\n        'id':3,\n        'qs':'What element does O represent on the periodic table?',\n        'options':['Oxygen','Osminium','Oganesson','Olium'],\n        'answer':0\n    },\n    {\n        'id':4,\n        'qs':'What is the capital of Spain?',\n        'options':['Barcelona','Paris','London','Madrid'],\n        'answer':3\n    },\n    {\n        'id':5,\n        'qs':'What year id WW2(World War 2) end?',\n        'options':['1938','1940','1941','1945'],\n        'answer':3\n    }\n\n];\nexport default question;","import { getDefaultNormalizer } from '@testing-library/react';\nimport React from 'react';\nimport {Card, CardTitle,CardBody,Button,Col } from 'reactstrap';\nimport question from '../questions/question'; \n\nimport '../css/answerboard.css';\n\n\nconst AnswerBoard =({score,showAnswerBoard})=>{\n    console.log(question);\n    return(\n        <div>\n            <div className='ansContainer'>\n                {question.map((qs)=>{\n                    return (\n                        <Card className='cardContain'>\n                            <CardTitle><h4>{qs.qs}</h4></CardTitle>\n                            <CardBody>\n                                <div><h5>{qs.options[qs.answer]}</h5></div>\n                            </CardBody>\n                        </Card>\n                    );\n                })}\n                \n            </div>\n            <div className='endAnsBoard'>\n            <Button color=\"primary\" onClick={showAnswerBoard}>Restart Quiz</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default AnswerBoard;","import React,{useState,useEffect} from 'react';\nimport question from '../questions/question';\nimport {Container,Button,Modal,Card, CardBody, CardTitle,ModalHeader} from 'reactstrap';\nimport { queryAllByAltText } from '@testing-library/react';\nimport AnswerBoard from './AnswerBoard';\n\nimport '../css/quizComponent.css'\n\n    /* Decoupling of quiz component */ \n\n    \nlet attendedQlist= [];                                                // storing and removing correct answer for questions.\n\nconst QuizComponent =({addScore,resetScore,drcScore,score,increaseTries,SuccessRate})=>{\n    const [Qno, setQno]=useState(0);\n    const [prev, setPrev]=useState(false);                            //next previous mechanism\n    const [nxt, setNxt]=useState(true);\n    const [modal, setModal] = useState(false);                        //modal for showing scoreboard\n    const [answerboard, setAnswerboard] = useState(false);            //answerboard\n    \n\n    let currentQuestion = question[Qno];                              // aligned to state to change on next and previous\n    let options = currentQuestion.options;\n    let answer = currentQuestion.answer;\n    \n\n    const qsans=(id,answer)=>{\n\n        if(!attendedQlist.includes(Qno)){                               //mechanism for collecting answer once only \n\n            if(id==answer){\n                attendedQlist.push(Qno);\n                addScore();\n            }\n        }else{\n            if(id!=answer){\n                drcScore();\n                attendedQlist = attendedQlist.filter((value)=>{\n                  return value!=Qno;\n                });\n            }\n        } \n        next();\n    }\n\n    const showAnswerBoard=()=>{\n        setAnswerboard(!answerboard);\n        setModal(false);\n        reset();\n    }\n\n    const submit = ()=>{\n        increaseTries();\n        console.log(question.length);\n        console.log('length'+score/question.length)\n        let scorePercent = score/question.length\n        SuccessRate(scorePercent)\n        console.log('clicked on submit');\n        setModal(true);\n    }\n\n    //  Reset ScoreBoard and reset question\n    const reset=()=>{\n        attendedQlist.length=0;                                                         //reset array \n        setQno(0);\n        resetScore();\n        setPrev(false)\n        setNxt(true);\n        setModal(false);\n    }\n    \n\n    const next=()=>{\n\n        if((Qno+2)==question.length) {\n            setNxt(false);\n        }else{\n            setPrev(true);\n        }\n\n        if(Qno<(question.length-1)){\n            let nxtnum = Qno+1;\n            setQno(nxtnum);\n\n        }\n        else{\n          \n        }\n    }\n\n    const previous=()=>{\n        if((Qno-1)==0){\n            setPrev(false);\n        }else{\n            setNxt(true);\n        }\n        if(Qno>0){\n            let prvnum = Qno -1;\n            setQno(prvnum);\n        }else{\n            alert('No more question before');\n        }\n    }\n\n    return(\n        <div className='containerDiv'>\n            {/* Question anser mechanism */}\n            {(!answerboard)?\n            <div className='questionBoard'>\n                <h2>{currentQuestion.qs}</h2>\n                {options.map((element,id)=>{\n                    return(\n                        <li onClick={()=>{qsans(id,answer)}}>\n                           <h5> {element}</h5>\n                        </li>\n                    )\n                })\n                }\n                \n            </div>\n            :null}\n            \n            {(!answerboard)?\n            <div>\n                <div className='btnGroup'>\n                    {prev?<Button color='primary' onClick={previous}>Previous</Button>:null}\n                    {nxt?<Button color='primary' onClick={next}>Next</Button>:null}\n                                \n                </div>\n                <div className ='linebreak'>\n                    <Button color='warning' onClick={reset}>Reset</Button>\n                    {(!nxt)?<Button color='success' onClick={submit}>Submit</Button>:null}\n                </div>\n                </div>\n            :null}\n\n            {/* Modal Component */}\n                <Modal isOpen={modal} onClick={()=>{setModal(false)}}>\n                <ModalHeader toggle={()=>{setModal(false)}}/>\n\n                    <Card className='modalContent'>\n                        <CardTitle><h3>SCORE</h3></CardTitle>\n                        <CardBody><h4>{score}</h4></CardBody>\n                    </Card>\n\n                    <div className='linebreak'>\n                        <Button  color='primary' onClick={showAnswerBoard}>Show Answers</Button>                                                {/* On click trigger */}\n                        <Button  color='danger' onClick={reset}>Restart</Button>\n                    </div>\n                      \n                </Modal>\n\n            {/* Answer board */}\n            {answerboard?<AnswerBoard score={score} showAnswerBoard={showAnswerBoard}/>:null}\n\n        </div>\n    )\n}\n\nexport default QuizComponent;","import React,{createContext,useState} from 'react';\n\nexport const ScoreBoardContext = createContext();\n\nconst ScoreBoardContextProvider = (props) =>{\n    const [score,setScore] = useState(0);\n    const [tries,setTries] =useState(0);\n    const [successRate,setsuccessRate] = useState(0);\n\n    const addScore=()=>{\n        let newscore = score+1;\n        setScore(newscore);\n    }\n\n    const resetScore = ()=>{\n        setScore(0);\n    }\n\n    const increaseTries = ()=>{\n        setTries((tries+1));\n    }\n\n    const SuccessRate=(rate)=>{\n        if(successRate==0){\n            setsuccessRate(rate)\n        }else{\n            let calculate = (successRate+rate)/2\n            setsuccessRate(calculate);\n        }\n        console.log(successRate);\n    }\n    \n    const decreaseScore=()=>{\n        let newscore = score-1;\n        if(newscore<0){\n            newscore=0;\n        }\n        setScore(newscore);\n    }\n\n    return(\n        <ScoreBoardContext.Provider value={{score,addScore,resetScore, decreaseScore, increaseTries,SuccessRate,successRate,tries}}>{props.children}</ScoreBoardContext.Provider>\n    );\n\n}\n\nexport default ScoreBoardContextProvider;\n\n","import React, {useContext, useState, useEffect} from 'react'; \nimport {Card,CardTitle} from 'reactstrap';\nimport QuizComponent from './QuizComponent';\nimport '../css/home.css';\n\nimport {ScoreBoardContext} from '../contexts/ScoreBoardContext';\n\n    /* Need to create a slide and click on radio buttons to record the changes */\n    /* Mechanism needs to start on this component */\n    \nconst HomeComponent= ()=>{\n    \n    const {score,addScore,resetScore,decreaseScore,increaseTries,SuccessRate,successRate} = useContext(ScoreBoardContext);\n    console.log('successrate'+successRate);\n    \n    \n    return(\n        <Card className='homeCard' >\n            <QuizComponent addScore={addScore} resetScore={resetScore} drcScore={decreaseScore} score={score} increaseTries={increaseTries} SuccessRate={SuccessRate}/>\n        </Card>\n    )\n}\n\nexport default HomeComponent;","import React, {Component, useContext, useEffect, useState} from 'react';  \nimport {Card} from 'reactstrap' ;\nimport '../css/profile.css';\n\nimport {ScoreBoardContext} from '../contexts/ScoreBoardContext';\n    /* Need to create a slide and click on radio buttons to record the changes */\n    /* Mechanism needs to start on this component */\n    \nconst ProfileComponent= ()=>{\n    const {tries,successRate} = useContext(ScoreBoardContext);\n    useEffect(()=>{\n        console.log(tries);\n    })\n\n    return(\n        <div className='profile'>\n            <div className='profileContent'>\n                <h4>Success Rate:</h4>\n                    <h6>{successRate}</h6>\n                <h4>No of Tries:</h4>\n                    <h6>{tries}</h6>\n            </div>\n        </div>\n    )\n}\n\nexport default ProfileComponent;","import React from 'react';\nimport {Navbar,Nav,NavLink, NavItem, NavbarBrand} from 'reactstrap';\nimport {Link} from \"react-router-dom\";\n\nimport '../css/navbar.css';\n\n/* Need to create a title bar*/\n/* Home and Possibly a profile page listing out the current score board*/\n\nconst NavBar = ()=>(\n    <div>        \n        <Navbar className='navBar' >\n            <NavbarBrand className='brandTag navBarHover'>Quizz em all</NavbarBrand>\n            <div className='navigationTitles'>\n                <Link className='navBarHover' to =\"/Home\">Home</Link>\n                <Link to className='navBarHover' to =\"/Profile\">Profile</Link>\n            </div>\n        </Navbar>       \n    </div>\n);\n\nexport default NavBar;","import React from 'react';\nimport {Navbar} from 'reactstrap';\n\nimport '../css/navbar.css';\n\n/* Basically continuation of Home and Logo integrated */\n\nconst Footer = ()=>(\n    <div>\n      <Navbar className='footer' >\n          Manez Co\n      </Navbar> \n         \n    </div>\n    );\n\nexport default Footer;","import React from 'react';\nimport {Container, Button} from 'reactstrap';\nimport {BrowserRouter,Switch,Route} from 'react-router-dom';\nimport HomeComponent from './Home';\nimport ProfileComponent from './Profile';\nimport ScoreBoardContextProvider from '../contexts/ScoreBoardContext';\nimport NavBar from './NavBar';\nimport Footer from './Footer';\n\n\n\nconst Index = ()=>(\n    <Container>\n        <BrowserRouter>\n        <ScoreBoardContextProvider>\n            <NavBar/> \n            <Switch>\n                <Route exact path='/Home' component={HomeComponent}/>\n                <Route path='/Profile' component={ProfileComponent}/>\n                <Route exact=\"/\" component={HomeComponent}/>\n            </Switch>\n            \n            <Footer/>\n        </ScoreBoardContextProvider>\n        </BrowserRouter>\n    </Container>\n\n);\n\nexport default Index;","import React from 'react';\nimport Index from './Components/Index';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst App = ()=>(\n  \n  <Index/>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}